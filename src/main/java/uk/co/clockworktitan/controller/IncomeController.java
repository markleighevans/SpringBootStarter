package uk.co.clockworktitan.controller;

import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import uk.co.clockworktitan.DefaultOutgoingsRepository;
import uk.co.clockworktitan.IncomeRepository;
import uk.co.clockworktitan.model.AffordabilityCase;
import uk.co.clockworktitan.model.DefaultOutgoings;
import uk.co.clockworktitan.model.Income;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/Income") // This means URL's start with /demo (after Application path)


public class IncomeController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private IncomeRepository IncomeRepository;
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private DefaultOutgoingsRepository DefaultOutgoingsRepository;

    //@GetMapping(path="/add") // Map ONLY GET Requests
    @PostMapping(path="/add")
    public @ResponseBody  String addNewUser (@RequestBody Income Income) {

        Income n = new Income();
        if (Income.getId()!= null)
        {
            //Record ID is being passed, so must be updating an existing record
            System.out.println("System ID: " + Income.getId());
            n.setId(Income.getId());
        }
        else
            // no ID passed, so must be a new record
        {System.out.println("Blank System ID "); }
        n.setAffordabilityCaseID(Income.getAffordabilityCaseID());
        n.setIncomeTypeId(Income.getIncomeTypeId());
        n.setIncomeDescription(Income.getIncomeDescription());
        n.setStressOutcome(Income.getStressOutcome());
        n.setFromDate(Income.getFromDate());
        n.setToDate(Income.getToDate());
        n.setAmount(Income.getAmount());
        IncomeRepository.save(n);

        JSONObject obj = new JSONObject();

        obj.put("id",  n.getId());

        return obj.toJSONString();

    }




    @GetMapping(path="/all")
    public @ResponseBody Iterable<Income> getAllUsers() {
        // This returns a JSON or XML with the users
        return IncomeRepository.findAll();
    }

    @GetMapping(path="/FindbyID/{IncomeID}")
    public @ResponseBody Income getSingleIncome(@PathVariable(value="IncomeID") int num1 ) {
        // This returns a JSON or XML with a single user
        System.out.println("Query Paramter:" + num1);
        return IncomeRepository.findOne(num1);
    }

    @GetMapping(path="/FindbyAffordabilityCaseID/{AffordabilityCaseID}")
    public @ResponseBody Iterable <Income> getAllIncomebyAffordabilityCaseID (@PathVariable(value="AffordabilityCaseID") int num1 ) {
        // This returns all Income records for a given AffordabilityCaseID
        System.out.println("Query Paramter:" + num1);
        //return IncomeRepository.findByAffordabilityCaseID(num1);
        return IncomeRepository.findAllByAffordabilityCaseID(num1);
    }

    @GetMapping(path="/DeletebyID/{UserID}")
    public @ResponseBody void DeleteSingleUser(@PathVariable(value="UserID") int num2 ) {
        // This returns a JSON or XML with a single user
       // System.out.println("Query Paramter:" + num1);
        IncomeRepository.delete(num2);
    }
}
