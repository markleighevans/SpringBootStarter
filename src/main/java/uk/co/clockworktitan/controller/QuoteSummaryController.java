package uk.co.clockworktitan.controller;

import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import uk.co.clockworktitan.QuoteSummaryRepository;
import uk.co.clockworktitan.model.QuoteSummary;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/QuoteSummary") // This means URL's start with /demo (after Application path)


public class QuoteSummaryController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private QuoteSummaryRepository QuoteSummaryRepository;

    //@GetMapping(path="/add") // Map ONLY GET Requests
    @PostMapping(path="/add")
    public @ResponseBody  String addNewQuote (@RequestBody QuoteSummary QuoteSummary) {

        QuoteSummary n = new QuoteSummary();
        if (QuoteSummary.getId()!= null)
        {
            //Record ID is being passed, so must be updating an existing record
            System.out.println("System ID: " + QuoteSummary.getId());
            n.setId(QuoteSummary.getId());
        }
        else
            // no ID passed, so must be a new record
        {System.out.println("Blank System ID "); }
        n.setApplicant1Name(QuoteSummary.getApplicant1Name());
        n.setApplicant2Name(QuoteSummary.getApplicant2Name());
        n.setApplicantCount(QuoteSummary.getApplicantCount());
        n.setProductDescription(QuoteSummary.getProductDescription());
        n.setFromDate(QuoteSummary.getFromDate());
        n.setToDate(QuoteSummary.getToDate());
        n.setAmount(QuoteSummary.getAmount());
        n.setProceededWith(QuoteSummary.getProceededWith());
        QuoteSummaryRepository.save(n);


        JSONObject obj = new JSONObject();

        obj.put("id",  n.getId());

        return obj.toJSONString();

    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<QuoteSummary> getAllQuoteSummarys() {
        // This returns a JSON or XML with the users
        return QuoteSummaryRepository.findAll();
    }

    @GetMapping(path="/FindbyID/{QuoteSummaryID}")
    public @ResponseBody QuoteSummary getSingleQuoteSummary(@PathVariable(value="QuoteSummaryID") int num1 ) {
        // This returns a JSON or XML with a single user
        System.out.println("Query Paramter:" + num1);
        return QuoteSummaryRepository.findOne(num1);
    }


    @GetMapping(path="/DeletebyID/{QuoteSummaryID}")
    public @ResponseBody void DeleteSingleQuoteSummary(@PathVariable(value="QuoteSummaryID") int num2 ) {
        // This returns a JSON or XML with a single user
       // System.out.println("Query Paramter:" + num1);
        QuoteSummaryRepository.delete(num2);
    }
}
