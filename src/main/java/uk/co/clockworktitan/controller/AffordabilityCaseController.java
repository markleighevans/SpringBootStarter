package uk.co.clockworktitan.controller;

import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import uk.co.clockworktitan.AffordabilityCaseRepository;
import uk.co.clockworktitan.QuoteSummaryRepository;
import uk.co.clockworktitan.model.AffordabilityCase;
import uk.co.clockworktitan.model.QuoteSummary;
import java.text.NumberFormat;
import java.util.Locale;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/AffordabilityCase") // This means URL's start with /demo (after Application path)


public class AffordabilityCaseController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AffordabilityCaseRepository AffordabilityCaseRepository;
    // used to populate case from quote
    @Autowired
    private QuoteSummaryRepository _QuoteSummaryRepository;

    //@GetMapping(path="/add") // Map ONLY GET Requests
    @PostMapping(path="/add")
    public @ResponseBody  String addNewUser (@RequestBody AffordabilityCase _AffordabilityCase) {

        AffordabilityCase n = new AffordabilityCase();
        if (_AffordabilityCase.getId()!= null)
        {
            //Record ID is being passed, so must be updating an existing record
            System.out.println("System ID: " + _AffordabilityCase.getId());
            n.setId(_AffordabilityCase.getId());
        }
        else
            // no ID passed, so must be a new record
        {System.out.println("Blank System ID "); }
        n.setoriginatingQuoteID(_AffordabilityCase.getoriginatingQuoteID());
        n.setName(_AffordabilityCase.getName());
        n.setApplicantCount(_AffordabilityCase.getApplicantCount());
        AffordabilityCaseRepository.save(n);

        JSONObject obj = new JSONObject();

        obj.put("id", n.getId());

        return obj.toJSONString();
    }

    @PostMapping(path="/CreatefromQuote/")
    public @ResponseBody  String CreateFromQuote (@RequestBody QuoteSummary _QuoteSummary) {
    Integer CaseRecordID = 0;
    AffordabilityCase CaseRecord = AffordabilityCaseRepository.findOneByoriginatingQuoteID(_QuoteSummary.getId());
    if ( CaseRecord== null)
        {
            // No case record exists for the quote, so will create a new one
            AffordabilityCase n = new AffordabilityCase();
            QuoteSummary tinker = _QuoteSummaryRepository.findOne(_QuoteSummary.getId());
            System.out.println("creating an affordability case for quote " + _QuoteSummary.getId());
            NumberFormat format = NumberFormat.getCurrencyInstance(Locale.UK);
            String Amount = format.format(tinker.getAmount());

            n.setName("Case for " + tinker.getApplicant1Name()+ " & "+ tinker.getApplicant2Name()  + " for product " + tinker.getProductDescription() + " for the value of " + Amount );
            n.setApplicantCount(tinker.getApplicantCount());
            n.setFromDate(tinker.getFromDate());
            n.setToDate(tinker.getToDate());
            n.setoriginatingQuoteID(_QuoteSummary.getId());
            AffordabilityCaseRepository.save(n);
            CaseRecordID = n.getId();
        }
        else
        {
            CaseRecordID= CaseRecord.getId();
        }

        JSONObject obj = new JSONObject();

        obj.put("id", CaseRecordID);

        return obj.toJSONString();
    }


    @GetMapping(path="/all")
    public @ResponseBody Iterable<AffordabilityCase> getAllUsers() {
        // This returns a JSON or XML with the users
        return AffordabilityCaseRepository.findAll();
    }

    @GetMapping(path="/FindbyID/{AffordabilityCaseID}")
    public @ResponseBody AffordabilityCase getSingleAffordabilityCase(@PathVariable(value="AffordabilityCaseID") int num1 ) {
        // This returns a JSON or XML with a single user
        System.out.println("Query Paramter:" + num1);
        return AffordabilityCaseRepository.findOne(num1);
    }

    @GetMapping(path="/DeletebyID/{UserID}")
    public @ResponseBody void DeleteSingleUser(@PathVariable(value="UserID") int num2 ) {
        // This returns a JSON or XML with a single user
       // System.out.println("Query Paramter:" + num1);
        AffordabilityCaseRepository.delete(num2);
    }
}
