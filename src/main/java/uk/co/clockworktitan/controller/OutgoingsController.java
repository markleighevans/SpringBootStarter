package uk.co.clockworktitan.controller;

import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import uk.co.clockworktitan.OutgoingsRepository;
import uk.co.clockworktitan.model.AffordabilityCase;
import uk.co.clockworktitan.model.DefaultOutgoings;
import uk.co.clockworktitan.model.Income;
import uk.co.clockworktitan.model.Outgoings;
import uk.co.clockworktitan.DefaultOutgoingsRepository;

import java.util.Iterator;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/Outgoings") // This means URL's start with /demo (after Application path)


public class OutgoingsController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private OutgoingsRepository OutgoingsRepository;
    @Autowired
    private DefaultOutgoingsRepository DefaultOutgoingsRepository;

    //@GetMapping(path="/add") // Map ONLY GET Requests
    @PostMapping(path = "/add")
    public @ResponseBody
    String addNewUser(@RequestBody Outgoings Outgoings) {

        Outgoings n = new Outgoings();
        if (Outgoings.getId() != null) {
            //Record ID is being passed, so must be updating an existing record
            System.out.println("System ID: " + Outgoings.getId());
            n.setId(Outgoings.getId());
        } else
        // no ID passed, so must be a new record
        {
            System.out.println("Blank System ID ");
        }

        n.setOutgoingsTypeId(Outgoings.getOutgoingsTypeId());
        n.setAffordabilityCaseID(Outgoings.getAffordabilityCaseID());
        n.setOutgoingsDescription(Outgoings.getOutgoingsDescription());
        n.setFromDate(Outgoings.getFromDate());
        n.setToDate(Outgoings.getToDate());
        n.setAmount(Outgoings.getAmount());
        OutgoingsRepository.save(n);

        JSONObject obj = new JSONObject();

        obj.put("id", n.getId());

        return obj.toJSONString();

    }

    @PostMapping(path="/addDefault")
    public @ResponseBody  String AddDefault (@RequestBody AffordabilityCase _AffordabilityCase) {

        Iterable<DefaultOutgoings>  _DefaultOutgoings = DefaultOutgoingsRepository.findAll();
        Iterator <DefaultOutgoings>  DefaultOutgoingIterator = _DefaultOutgoings.iterator();
        DefaultOutgoings DefaultOutgoings;
        System.out.println("Afforability case added to /adddefault=" + _AffordabilityCase.toString());

        while (DefaultOutgoingIterator.hasNext())
        {
            Outgoings n = new Outgoings();
            DefaultOutgoings = DefaultOutgoingIterator.next();
            System.out.println(DefaultOutgoings.toString());
            n.setAffordabilityCaseID(_AffordabilityCase.getId());
            n.setOutgoingsTypeId(DefaultOutgoings.getOutgoingsTypeID());
            n.setOutgoingsDescription(DefaultOutgoings.getDescription());
            n.setFromDate(_AffordabilityCase.getFromDate());
            n.setToDate(_AffordabilityCase.getToDate());
            n.setAmount(DefaultOutgoings.getAmount()*52); //ONS stats are weekly, so convert to annual
            OutgoingsRepository.save(n);

        }

           // Outgoings n = new Outgoings();
           // n.setAffordabilityCaseID(_AffordabilityCase.getId());
           // n.setOutgoingsTypeId(i.getOutgoingsTypeID());
           // n.setOutgoingsDescription(i.getDescription());
           // n.setFromDate(_AffordabilityCase.getFromDate());
           // n.setToDate(_AffordabilityCase.getToDate());
           // n.setAmount(i.getAmount());
           // OutgoingsRepository.save(n);
           // System.out.println("Saving default");
           // System.out.println(i.toString());


        JSONObject obj = new JSONObject();

        obj.put("id",  10);

        return obj.toJSONString();

    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<Outgoings> getAllUsers() {
        // This returns a JSON or XML with the users
        return OutgoingsRepository.findAll();
    }

    @GetMapping(path = "/FindbyID/{OutgoingsID}")
    public @ResponseBody
    Outgoings getSingleOutgoings(@PathVariable(value = "OutgoingsID") int num1) {
        // This returns a JSON or XML with a single user
        System.out.println("Query Paramter:" + num1);
        return OutgoingsRepository.findOne(num1);
    }

    @GetMapping(path = "/DeletebyID/{UserID}")
    public @ResponseBody
    void DeleteSingleUser(@PathVariable(value = "UserID") int num2) {
        // This returns a JSON or XML with a single user
        // System.out.println("Query Paramter:" + num1);
        OutgoingsRepository.delete(num2);
    }

    @GetMapping(path = "/FindbyAffordabilityCaseID/{AffordabilityCaseID}")
    public @ResponseBody
    Iterable<Outgoings> getOutgoingsByAffordabilityCaseID(@PathVariable(value = "AffordabilityCaseID") int num1) {
        // This returns a JSON or XML with a single user
        System.out.println("Query Outgoings by AffordabilityCaseID: " + num1);
        return OutgoingsRepository.findAllByAffordabilityCaseID(num1);
    }
}
